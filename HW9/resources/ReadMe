README:

Thank you so much for taking your time to grade my homework. If you have any questions or concerns
please reach out to me: hengleaksmy1998.gmail.com

---------------------------------- Changes for the HW9 ----------------------------------------------
- Adding the remove method - this would be used to remove the photo
- Adding snapshot method - this will be used to snapshot the photoAlbum at a certain time frame
    For this method, we take description as the argument. If user didn't put anything in as for description
    it would default to empty string.
- Adding htmlCommand - this will return the string of html that we will use as the output for the html view.
    In here, we loop through the snapShotList to get each snapshot. Then we loop through each snapshot
    to get the value of the shape in the snapshot (snapshotList is a map of a map hence snapshot
    is a map that contain name, type, x, y, width, height, and color value). We build the html
    command as we loop through the snapshot and the snapshotList.
- Adding getSnapShotList - this will give us a copy of the snapshot.
- Adding getSnapShotListKey - this will return the Array of the snapshotList that we copy.
    We will use this list of the key as an index when we create the button to preview the
    next or the previous snapshot. This will also used when we create a select button that give
    us the option cause each option is the snapshot key and it will be indexed.
- Alter the method shapeListToString to use the shapeListCopy instead so that we we could store
the shapeList into the shapeListCopy hashmap and use it to give out the information.

------------------------------------- Adding the Utilities package ------------------------------

- In Utilities package, we create an interface called photoAlbumBuilder and 2 classes, photoAlbumBuilder and photoAlbumReader.
- In photoAlbumReader, it read the file that we put in and scan it.
    Upon reading, we are looking for command such as shape, snapshot, move, resize, color and remove.
    If one of the command are triggered, then it will called the function associated with those command.
        shape command -> readShape
            readShape command will scan the line that detect the shape command for name, x, y, width, height, red, green and blue.
            After that, it will called the function addShape that we have in photoAlbumBuilder.
        snapshot command -> readSnapShot
            readSnapShot command will scan the line for the word snapshot. If it detect it, it will scan all the words that are in that line
            to check for the snapshot description.
            After that it will called the function snapshot that we have in the photoAlbumBuilder.
        move command -> readChangePosition
            move command will scan the line for the snapshot key, x and y coordinate. If it detect those,
            it will called the changePosition method that is listed in photoAlbumBuilder.
        resize command -> readChangeShapeSize
            resize command will scan for the word resize. If it detects one, it will scan for the snap shot key, widht and height.
            If it detects string, int, int, it will pass that the the method changeShapeSize
        color command -> readChangeColor
            color command will scan for the word color. If it detects one, it will scan for the snap shot key, red, green and blue color.
            If it detects string, int, int and int, it will pass that the the method changeColor.
        remove command -> readRemove
            remove will scan for the key word remove then it sued scan.next to check for the next string which is the snapshot key.
            If found, it will call the remove function that take shapeID or snapshotKey as its parameter.

        * note: the photoAlbumBuilder interace is implemented by photoAlbumReader and photoAlbumReader
        called the model to implement the addShape method in IPhotoAlbum.)
- photoAlbumImp implements the photoAlbumBuilder<IPhotoAlbum> by calling the IPhotoAlbum methods.
    This will help us populate the content of the shape correctly to IPhotoAlbum.

------------------------------------- Adding view package ---------------------------------------------
- After reading the file and having it populate correctly to the IPhotoAlbum. We are now working on using
    it to output the html file and to output the graphical view.
- To do so, we created a IView which will be used in both htmlView and graphicalView. In IView,
    we implement
        - makeVisible: used in graphicalView
        - getPanel: used in graphicalView
        - output: used in htmlView to output the .html file
        - getViewType: used in both html and graphical view to return a string of whether it is a graphical or html.
            This will be used as a switch in the main function.
        - getView: used in the htmlView to output the htmlCommand or html string
- After we have our interface, I now implement the html view. htmlView implements the IView.
    From the description for IView, we already know the top functions that we used for that are output, getViewType and getView.
    In getView, we call the htmlCommand from the IPhotoAlbum.
    In getViewType, we return the string as of "web".
    In output, we take the output file name and the string content. In this case, the string content is the getView.
- We also have the graphicalView. In graphicalView, we create a helper class called GraphicalBuilder.
    In GraphicalBuilder, what we did was we overwrite the painComponent function to used it to loop
    through to get the shape information like its shape name, shape type, x, y, widht, height, red, blue
    and green color. In that function, we didn't loop through the snapshotList function, rather we use
    the index to get the information of a certain snapshot. The reason that we used index was because we
    are going to implement the next, prev, and select function. The default snapshot is the first snapshot
    which is index 0.

    For graphicalView, we used it to set up our interactive view by extending the JFrame and implement IView and ActionListener.
    The most important function in that would be the actionPerformed. In actionPerformed, we listen to the clicking events
    such as next, prev, select or quit.
        If the user click next, the index will bump by 1 and we will repaint the graphicalBuilder using that the increased index.
        If the user click prev, the index will reduce by 1 and we will repaint the graphicalBuilder using the new reduced index.
        If the user click select, we will implement the JOptionPane to give us the list of the snapshot key, when user
            select one of it, we will know the index and we will repaint the graphicalBuilder using that index.
        If the user click quite, the program exit.

---------------------------------------- Adding controller Package -----------------------------------
- In controller package, we have 1 interface called IController and one class called Controller.
- In the IController interface, we only have one method in there which is start. Start will execute
    different thing depends on what is our argument. If it is the graphical then we will execute the
    graphicalView, but if it is the html one, then we will execute the htmlView.
- In Controller class, we implements the IController interface. We construct 2 constructors, one with
    2 parameters IPhotoAlbum model, and IView view. This will be used for the graphicalView.
    The other constructor take 3 parameters, IPhotoAlbum model, IView view and String output. This
    constructor will be used with the web view as we have to output the htlm file.
    The start function will check what kind of view we are getting and execute it accordingly.

---------------------------------------- Adding the PhotoAlbumMain method------------------------------
- PhotoAlbumMain is the main method. It processes the command line argument that we put in. We
    scan that command line to check for the file that we want to process (by checking for the keyword -in),
    the kind of view that we are going to execute based on the file that we just get (by checking for
    keyword -v or -view), and the output file if it is the html view or the optional canvas width or canvas height
    if it is the graphicalView.
    Toward the end of the method, we call the controller to execute the start method based on
    the type of view that are getting.
